/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nesvadba.tomas.cct.gui;

import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.swing.SpinnerNumberModel;

import com.nesvadba.tomas.cct.Convertor;
import com.nesvadba.tomas.cct.RandomColor;
import com.nesvadba.tomas.cct.domain.CCT;
import com.nesvadba.tomas.cct.domain.Point;
import com.nesvadba.tomas.cct.domain.ShapeTree;
import com.nesvadba.tomas.cct.enums.ComponentProperty;
import com.nesvadba.tomas.cct.enums.FilterProps;
import com.nesvadba.tomas.cct.filter.CCTFilter;
import com.nesvadba.tomas.cct.filter.ShapeTreeFilter;
import com.nesvadba.tomas.cct.generator.CCTGenerator;
import com.nesvadba.tomas.cct.generator.MaxTreeGenerator;
import com.nesvadba.tomas.cct.generator.MinTreeGenerator;
import com.nesvadba.tomas.cct.generator.ShapeTreeGenerator;

import ij.IJ;
import ij.ImagePlus;
import ij.gui.RoiListener;
import ij.plugin.frame.PlugInFrame;
import ij.process.ImageProcessor;

/**
 *
 * @author nipaba
 */
public class CCT_PluginFrame extends PlugInFrame {

    private static final long serialVersionUID = 1L;

    private ImagePlus image;
    private ImagePlus orig;

    private CCT maxTree, minTree, cct;
    private ShapeTree shapeTree;
    private final CCTGenerator maxTreeGenerator = new MaxTreeGenerator();
    private final CCTGenerator minTreeGenerator = new MinTreeGenerator();
    private RandomColor randomColor = new RandomColor();
    private boolean keepOnlyOne = true;

    private Map<FilterProps, Integer> filterProperties = new HashMap<>();
    private Map<ComponentProperty, Boolean> selectedFilters = new HashMap<>();

    public CCT_PluginFrame() {

        super("CCT Frame");
        initComponents();
        initFilterProps();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        filterGroup = new javax.swing.ButtonGroup();
        buttonGroup1 = new javax.swing.ButtonGroup();
        titleLabel = new javax.swing.JLabel();
        minSizeSpinner = new javax.swing.JSpinner();
        maxSizeSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        minHeightSpinner = new javax.swing.JSpinner();
        maxHeightSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        nodesCount = new javax.swing.JLabel();
        pixelsCount = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        treeHeightLabel = new javax.swing.JLabel();
        treeHeight = new javax.swing.JLabel();
        title = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        progressBarDesc = new javax.swing.JLabel();
        initImgBtn = new javax.swing.JButton();
        recalcTreeBtn = new javax.swing.JButton();
        titleLabel1 = new javax.swing.JLabel();
        titleLabel2 = new javax.swing.JLabel();
        sizeCheck = new javax.swing.JCheckBox();
        heightCheck = new javax.swing.JCheckBox();
        intensityCheck = new javax.swing.JCheckBox();
        maxIntensitySpinner = new javax.swing.JSpinner();
        minIntensitySpinner = new javax.swing.JSpinner();
        minEnlongSpinner = new javax.swing.JSpinner();
        enlongCheck = new javax.swing.JCheckBox();
        maxEnlongSpinner = new javax.swing.JSpinner();
        maxRoundSpinner = new javax.swing.JSpinner();
        minRoundSpinner = new javax.swing.JSpinner();
        roundCheck = new javax.swing.JCheckBox();
        radioMinTree = new javax.swing.JRadioButton();
        radioMaxTree = new javax.swing.JRadioButton();
        radioShapeThree = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();

        setBackground(java.awt.Color.lightGray);
        setForeground(java.awt.Color.lightGray);
        setMinimumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(500, 500));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(new java.awt.GridBagLayout());

        titleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleLabel.setText("Node count");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(titleLabel, gridBagConstraints);

        minSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minSizeSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(minSizeSpinner, gridBagConstraints);

        maxSizeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSizeSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(maxSizeSpinner, gridBagConstraints);

        jLabel2.setText("Min");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Max");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jLabel3, gridBagConstraints);

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(filterButton, gridBagConstraints);

        minHeightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minHeightSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(minHeightSpinner, gridBagConstraints);

        maxHeightSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxHeightSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(maxHeightSpinner, gridBagConstraints);

        jLabel6.setText("FILTER");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(jLabel6, gridBagConstraints);

        nodesCount.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        add(nodesCount, gridBagConstraints);

        pixelsCount.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 6;
        add(pixelsCount, gridBagConstraints);

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setText("Connected Component Tree");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        add(jLabel7, gridBagConstraints);

        treeHeightLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        treeHeightLabel.setText("Tree Height");
        treeHeightLabel.setToolTipText("");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(treeHeightLabel, gridBagConstraints);

        treeHeight.setText("0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        add(treeHeight, gridBagConstraints);

        title.setText("title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        add(title, gridBagConstraints);

        progressBar.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        progressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 25;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 0);
        add(progressBar, gridBagConstraints);

        progressBarDesc.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 26;
        gridBagConstraints.gridwidth = 4;
        add(progressBarDesc, gridBagConstraints);

        initImgBtn.setText("Orig img");
        initImgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initImgBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(initImgBtn, gridBagConstraints);

        recalcTreeBtn.setText("Recalc tree");
        recalcTreeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recalcTreeBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        add(recalcTreeBtn, gridBagConstraints);

        titleLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleLabel1.setText("Pixel Count");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(titleLabel1, gridBagConstraints);

        titleLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        titleLabel2.setText("Title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(titleLabel2, gridBagConstraints);

        sizeCheck.setText("Size");
        sizeCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sizeCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(sizeCheck, gridBagConstraints);

        heightCheck.setText("Height");
        heightCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                heightCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(heightCheck, gridBagConstraints);

        intensityCheck.setText("Intensity");
        intensityCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                intensityCheckStateChanged(evt);
            }
        });
        intensityCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intensityCheckActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(intensityCheck, gridBagConstraints);

        maxIntensitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxIntensitySpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(maxIntensitySpinner, gridBagConstraints);

        minIntensitySpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minIntensitySpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 14;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(minIntensitySpinner, gridBagConstraints);

        minEnlongSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minEnlongSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(minEnlongSpinner, gridBagConstraints);

        enlongCheck.setText("Enlongation");
        enlongCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                enlongCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(enlongCheck, gridBagConstraints);

        maxEnlongSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxEnlongSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(maxEnlongSpinner, gridBagConstraints);

        maxRoundSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxRoundSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(maxRoundSpinner, gridBagConstraints);

        minRoundSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minRoundSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(minRoundSpinner, gridBagConstraints);

        roundCheck.setText("Roundness");
        roundCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                roundCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(roundCheck, gridBagConstraints);

        buttonGroup1.add(radioMinTree);
        radioMinTree.setText("Min Tree");
        radioMinTree.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioMinTreeStateChanged(evt);
            }
        });
        radioMinTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioMinTreeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 20;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(radioMinTree, gridBagConstraints);

        buttonGroup1.add(radioMaxTree);
        radioMaxTree.setText("Max Tree");
        radioMaxTree.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioMaxTreeStateChanged(evt);
            }
        });
        radioMaxTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioMaxTreeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 21;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(radioMaxTree, gridBagConstraints);

        buttonGroup1.add(radioShapeThree);
        radioShapeThree.setText("Shape Tree");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 22;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(radioShapeThree, gridBagConstraints);

        jButton1.setText("Nápověda");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 28;
        add(jButton1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void intensityCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_intensityCheckStateChanged
        selectedFilters.put(ComponentProperty.INTENSITY, intensityCheck.isSelected());
    }//GEN-LAST:event_intensityCheckStateChanged

    private void intensityCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intensityCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intensityCheckActionPerformed

    private void minIntensitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minIntensitySpinnerStateChanged
        int value = (int) minIntensitySM.getValue();
        filterProperties.put(FilterProps.INTENSITY_MIN, value);
        filterImage();
    }//GEN-LAST:event_minIntensitySpinnerStateChanged

    private void maxIntensitySpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxIntensitySpinnerStateChanged
        int value = (int) maxIntensitySM.getValue();
        filterProperties.put(FilterProps.INTENSITY_MAX, value);
        filterImage();
    }//GEN-LAST:event_maxIntensitySpinnerStateChanged

    private void initImgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initImgBtnActionPerformed
        reprintOrig();
    }//GEN-LAST:event_initImgBtnActionPerformed

    private void minEnlongSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minEnlongSpinnerStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_minEnlongSpinnerStateChanged

    private void maxEnlongSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxEnlongSpinnerStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_maxEnlongSpinnerStateChanged

    private void minRoundSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minRoundSpinnerStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_minRoundSpinnerStateChanged

    private void maxRoundSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxRoundSpinnerStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_maxRoundSpinnerStateChanged

    private void roundCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_roundCheckStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_roundCheckStateChanged

    private void enlongCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_enlongCheckStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_enlongCheckStateChanged

    private void recalcTreeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recalcTreeBtnActionPerformed
        run("");
    }//GEN-LAST:event_recalcTreeBtnActionPerformed

    private void radioMinTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioMinTreeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioMinTreeActionPerformed

    private void radioMaxTreeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radioMaxTreeStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_radioMaxTreeStateChanged

    private void radioMinTreeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radioMinTreeStateChanged
        if (radioMinTree.isSelected()) {
            cct = minTree;
        };
    }//GEN-LAST:event_radioMinTreeStateChanged

    private void radioMaxTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioMaxTreeActionPerformed
        if (radioMaxTree.isSelected()) {
            cct = maxTree;
        };
    }//GEN-LAST:event_radioMaxTreeActionPerformed

    private void sizeCheckStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_sizeCheckStateChanged
        selectedFilters.put(ComponentProperty.SIZE, sizeCheck.isSelected());

    }// GEN-LAST:event_sizeCheckStateChanged

    private void heightCheckStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_heightCheckStateChanged
        selectedFilters.put(ComponentProperty.HEIGHT, heightCheck.isSelected());
    }// GEN-LAST:event_heightCheckStateChanged

    private void maxHeightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_maxHeightSpinnerStateChanged
        int maxHeight = (int) maxHeightSM.getValue();
        filterProperties.put(FilterProps.HEIGHT_MAX, maxHeight);
        filterImage();
    }// GEN-LAST:event_maxHeightSpinnerStateChanged

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitForm
        this.hide();
    }// GEN-LAST:event_exitForm

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_filterButtonActionPerformed
        filterImage();

    }// GEN-LAST:event_filterButtonActionPerformed

    private void minSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_minSizeSpinnerStateChanged
        int minSize = (int) minSizeSM.getValue();
        filterProperties.put(FilterProps.SIZE_MIN, minSize);
        filterImage();

    }// GEN-LAST:event_minSizeSpinnerStateChanged

    private void maxSizeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_maxSizeSpinnerStateChanged
        int maxSize = (int) maxSizeSM.getValue();
        filterProperties.put(FilterProps.SIZE_MAX, maxSize);
        filterImage();
    }// GEN-LAST:event_maxSizeSpinnerStateChanged

    private void minHeightSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_minHeightSpinnerStateChanged
        int minHeight = (int) minHeightSM.getValue();
        filterProperties.put(FilterProps.HEIGHT_MIN, minHeight);
        filterImage();
    }// GEN-LAST:event_minHeightSpinnerStateChanged

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox enlongCheck;
    private javax.swing.JButton filterButton;
    private javax.swing.ButtonGroup filterGroup;
    private javax.swing.JCheckBox heightCheck;
    private javax.swing.JButton initImgBtn;
    private javax.swing.JCheckBox intensityCheck;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JSpinner maxEnlongSpinner;
    private javax.swing.JSpinner maxHeightSpinner;
    private javax.swing.JSpinner maxIntensitySpinner;
    private javax.swing.JSpinner maxRoundSpinner;
    private javax.swing.JSpinner maxSizeSpinner;
    private javax.swing.JSpinner minEnlongSpinner;
    private javax.swing.JSpinner minHeightSpinner;
    private javax.swing.JSpinner minIntensitySpinner;
    private javax.swing.JSpinner minRoundSpinner;
    private javax.swing.JSpinner minSizeSpinner;
    private javax.swing.JLabel nodesCount;
    private javax.swing.JLabel pixelsCount;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel progressBarDesc;
    private javax.swing.JRadioButton radioMaxTree;
    private javax.swing.JRadioButton radioMinTree;
    private javax.swing.JRadioButton radioShapeThree;
    private javax.swing.JButton recalcTreeBtn;
    private javax.swing.JCheckBox roundCheck;
    private javax.swing.JCheckBox sizeCheck;
    private javax.swing.JLabel title;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel titleLabel1;
    private javax.swing.JLabel titleLabel2;
    private javax.swing.JLabel treeHeight;
    private javax.swing.JLabel treeHeightLabel;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("static-access")
    public void run(String arg) {
        // create a dialog with two numeric input fields
        this.show();

        image = IJ.getImage();

        // TODO - 
        image.getRoi().addRoiListener(new RoiListener() {
            
            @Override
            public void roiModified(ImagePlus imp, int id) {
                if (id == RoiListener.MODIFIED){
                    System.out.println("Roi modified " + image.getRoi());
                    
                    Rectangle bounds = image.getRoi().getBounds();
                    
                    searchFor(bounds.getMinX(),bounds.getMinY(),bounds.getMaxX(),bounds.getMaxY());
                }
                
            }

        });
        orig = image.duplicate();

        title.setText(image.getTitle());

        Point[][] imgPoints = Convertor.initPoints(image);

        // RUN CCT
        //Max Tree
        progressBarDesc.setText("Creating : Connected component tree - Max Tree");
        progressBar.setValue(0);
        maxTree = maxTreeGenerator.createCCT(imgPoints);
        updatePanel(maxTree);

        //Min Tree
        progressBarDesc.setText("Creating : Connected component tree - Min Tree");
        progressBar.setValue(25);
        Convertor.reinitStaturs(imgPoints);
        minTree = minTreeGenerator.createCCT(imgPoints);
        updatePanel(minTree);

        //Shape Three 
        progressBarDesc.setText("Creating : Connected component tree - Shape Tree");
        progressBar.setValue(50);
        List<CCT> ccts = new ArrayList<>();
        ccts.add(maxTree);
        ccts.add(minTree);
        ShapeTreeGenerator shapeTreeGen = new ShapeTreeGenerator();
        shapeTree =shapeTreeGen.createShapeTree(ccts);

        //Eval tree properties
        progressBarDesc.setText("Calculating Tree properties");
        progressBar.setValue(75);

        progressBarDesc.setText("Finish");
        progressBar.setValue(100);

        image.setProcessor(image.getProcessor().convertToRGB());


    }

    private void updatePanel(CCT updateCCT) {
        treeHeight.setText(updateCCT.getProperties().get(ComponentProperty.HEIGHT) + "");
        nodesCount.setText(updateCCT.getNodeCount() + "");
        pixelsCount.setText(updateCCT.getProperties().get(ComponentProperty.SIZE) + "");
    }
    
    private void updatePanel(ShapeTree shapeTree) {
        // TODO - 
        treeHeight.setText("");
        nodesCount.setText("");
        pixelsCount.setText("");
    }

    private SpinnerNumberModel minSizeSM = new SpinnerNumberModel();
    private SpinnerNumberModel maxSizeSM = new SpinnerNumberModel();
    private SpinnerNumberModel minHeightSM = new SpinnerNumberModel();
    private SpinnerNumberModel maxHeightSM = new SpinnerNumberModel();
    private SpinnerNumberModel minIntensitySM = new SpinnerNumberModel();
    private SpinnerNumberModel maxIntensitySM = new SpinnerNumberModel();

    private void initFilterProps() {

        minSizeSM.setMinimum(0);
        minSizeSM.setMaximum(999999999);
        minSizeSM.setValue(500);
        filterProperties.put(FilterProps.SIZE_MIN, 500);
        minSizeSpinner.setModel(minSizeSM);

        maxSizeSM.setMinimum(0);
        maxSizeSM.setMaximum(999999999);
        maxSizeSM.setValue(1000);
        filterProperties.put(FilterProps.SIZE_MAX, 1000);
        maxSizeSpinner.setModel(maxSizeSM);

        minHeightSM.setMinimum(0);
        minHeightSM.setMaximum(999999999);
        minHeightSM.setValue(15);
        filterProperties.put(FilterProps.HEIGHT_MIN, 15);
        minHeightSpinner.setModel(minHeightSM);

        maxHeightSM.setMinimum(0);
        maxHeightSM.setMaximum(999999999);
        maxHeightSM.setValue(100);
        filterProperties.put(FilterProps.HEIGHT_MAX, 100);
        maxHeightSpinner.setModel(maxHeightSM);

        minIntensitySM.setMinimum(0);
        minIntensitySM.setMaximum(999999999);
        minIntensitySM.setValue(0);
        filterProperties.put(FilterProps.INTENSITY_MIN, 0);
        minIntensitySpinner.setModel(minIntensitySM);

        maxIntensitySM.setMinimum(0);
        maxIntensitySM.setMaximum(999999999);
        maxIntensitySM.setValue(255);
        filterProperties.put(FilterProps.INTENSITY_MAX, 255);
        maxIntensitySpinner.setModel(maxIntensitySM);

    }
    
    private void filterImage(){
        if (radioShapeThree.isSelected()){
            filterShapeTreeImage();
        }
        else {
            filterCCTImage();
        }
    }
    

    private void filterShapeTreeImage() {
        boolean isAnyFilterOn = false;
        for (boolean filterOn : selectedFilters.values()) {
            isAnyFilterOn = isAnyFilterOn || filterOn;
        }
        if (!isAnyFilterOn) {
            return;
        }

        reprintOrig();
        ImageProcessor proc = image.getProcessor();

        image.repaintWindow();

        for (ShapeTree node : ShapeTreeFilter.filterByProperties(shapeTree, filterProperties, selectedFilters,keepOnlyOne)) {

            proc.setColor(randomColor.getRandColor());
            
            int left = node.getOrigNode().getProperties().get(ComponentProperty.LEFT);
            int up = node.getOrigNode().getProperties().get(ComponentProperty.UP);
            
            ImageProcessor mask = node.getImageProcessor();
            for (int x = 0; x< mask.getWidth() ; x++){
                for (int y = 0; y< mask.getHeight() ; y++){
                    if (mask.get(x,y)<127){
                        proc.drawDot(x+up,y+left);
                    }
                    
                }
            }

            image.repaintWindow();
        }
        
    }

    private void filterCCTImage() {

        boolean isAnyFilterOn = false;
        for (boolean filterOn : selectedFilters.values()) {
            isAnyFilterOn = isAnyFilterOn || filterOn;
        }
        if (!isAnyFilterOn) {
            return;
        }

        reprintOrig();
        ImageProcessor proc = image.getProcessor();

        image.repaintWindow();

        for (CCT node : CCTFilter.filterByProperties(cct, filterProperties, selectedFilters,keepOnlyOne)) {

//            System.out.println(node.getCode() + " = " + node.getSubPoints().size() + "/" + node.getPoints().size());

            proc.setColor(randomColor.getRandColor());
            for (Set<Point> subnode : node.getAllPoints()) {
                for (Point point : subnode) {
                    proc.drawDot(point.y, point.x);
                }
            }
            image.repaintWindow();
        }
    }

    private void reprintOrig() {

        ImageProcessor proc = image.getProcessor();
        ImageProcessor origProc = orig.getProcessor();
        // Reprint Orig
        for (int x = 0; x < proc.getWidth(); x++) {
            for (int y = 0; y < proc.getHeight(); y++) {
                int gray = origProc.get(x, y);
                proc.setColor(gray);
                proc.drawDot(x, y);
            }
        }

        image.repaintWindow();
    }
    
    private void searchFor(double minX, double minY, double maxX, double maxY) {

        filterProperties.put(FilterProps.LEFT, Double.valueOf(minY).intValue());
        filterProperties.put(FilterProps.RIGHT, Double.valueOf(maxY).intValue());
        filterProperties.put(FilterProps.UP, Double.valueOf(minX).intValue());
        filterProperties.put(FilterProps.BOTTOM, Double.valueOf(maxX).intValue());
        
        filterProperties.put(FilterProps.MAX, Integer.MAX_VALUE);
        filterProperties.put(FilterProps.MIN, Integer.MIN_VALUE);

        selectedFilters.put(ComponentProperty.LEFT, true);
        selectedFilters.put(ComponentProperty.RIGHT, true);
        selectedFilters.put(ComponentProperty.UP, true);
        selectedFilters.put(ComponentProperty.DOWN, true);
        
        filterImage();
    }

}
